{"version":3,"file":"static/js/325.027999d0.chunk.js","mappings":"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","sources":["components/ContactList/ContactListStyled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/useSelectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactFormStyled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nexport const DeleteBtnContact = styled.button`\n  &: hover {\n    background-color: teal;\n  }\n`;\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-width: 400px;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilters = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  ContactListItem,\n  DeleteBtnContact,\n  ContactsList,\n} from './ContactListStyled';\n\nimport { deleteContact } from 'redux/contacts/operation';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/useSelectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactsByFilter = useSelector(selectVisibleContacts);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n      {error && <b>Something went wrong... Try reloading the page </b>}\n      {isLoading && !error && 'Loading...'}\n      <ContactsList>\n        {contactsByFilter.map(contact => (\n          <ContactListItem key={contact.id}>\n            {contact.name} - {contact.number}\n            <DeleteBtnContact\n              type=\"button\"\n              onClick={() => handleDeleteContact(contact.id)}\n            >\n              Delete\n            </DeleteBtnContact>\n          </ContactListItem>\n        ))}\n      </ContactsList>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  max-width: 400px;\n`;\nexport const FormButton = styled.button`\n  width: 200px;\n  &: hover {\n    background-color: teal;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormButton, FormStyle } from './ContactFormStyled';\n\nimport { selectContacts } from 'redux/contacts/useSelectors';\nimport { addContact } from 'redux/contacts/operation';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const existingContacts = useSelector(selectContacts);\n  const [contact, setContact] = useState({ name: '', number: '' });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setContact(prevContact => ({ ...prevContact, [name]: value }));\n  };\n\n  const isContactExists = () => {\n    if (!existingContacts || !existingContacts.items) {\n      return false;\n    }\n\n    return existingContacts.items.some(\n      existingContact =>\n        existingContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = contact;\n\n    if (name === '' || number === '') {\n      alert('Please enter both name and phone number for the contact.');\n      return;\n    }\n\n    if (isContactExists()) {\n      alert(`Contact with name '${name}' already exists!`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    setContact({ name: '', number: '' });\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={contact.name}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter name\"\n      />\n      <input\n        type=\"text\"\n        name=\"number\"\n        value={contact.number}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter phone number\"\n      />\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </FormStyle>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilters } from 'redux/contacts/useSelectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilters);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleChange}\n      placeholder=\"Find contacts by name\"\n    />\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactList from 'components/ContactList/ContactList';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { selectIsLoading } from 'redux/contacts/useSelectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <title>Your Contacts</title>\n      </div>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["DeleteBtnContact","styled","_templateObject","_taggedTemplateLiteral","ContactsList","_templateObject2","ContactListItem","_templateObject3","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectFilters","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","item","toLowerCase","includes","dispatch","useDispatch","useSelector","contactsByFilter","_jsxs","_Fragment","children","_jsx","contact","number","type","onClick","contactId","id","deleteContact","FormStyle","FormButton","existingContacts","_useState","useState","_useState2","_slicedToArray","setContact","handleChange","e","_e$target","target","prevContact","_objectSpread","_defineProperty","onSubmit","preventDefault","some","existingContact","alert","addContact","onChange","required","placeholder","setFilter","Contacts","useEffect","fetchContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}